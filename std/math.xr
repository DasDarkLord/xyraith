struct :math {
}

function :math.e (-> number) {
    return 2.718281828459045
}

function :math.pi (-> number) {
    return 3.141592653589793
}

function :math.tau (-> number) {
    return (mul (call :math.pi) 2)
}

function :math.degrees_to_radians (-> number) {
    return 0.017453292519943295
}

function :math.radians_to_degrees (-> number) {
    return 57.29577951308232
}

function :math.toDegrees (number -> number) {
    return (mul (parameter 0) (call :math.radians_to_degrees))
}

function :math.toRadians (number -> number) {
    return (mul (parameter 0) (call :math.degrees_to_radians))
}

function :math.factorial (number -> number) {
    if (leq (parameter 0) 0) {
        return 1
    }
    return (mul (parameter 0) (call :math.factorial (sub (parameter 0) 1)))
}

function :math.sqrt (number -> number) {
    return (pow (parameter 0) 0.5)
}

function :math.cbrt (number -> number) {
    return (pow (parameter 0) (div 1 3))
}

function :math.sin (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "sin(D)D") (parameter 0))
}

function :math.asin (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "asin(D)D") (parameter 0))
}

function :math.sinh (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "sinh(D)D") (parameter 0))
}

function :math.cos (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "cos(D)D") (parameter 0))
}

function :math.acos (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "acos(D)D") (parameter 0))
}

function :math.cosh (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "cosh(D)D") (parameter 0))
}

function :math.tan (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "tan(D)D") (parameter 0))
}

function :math.atan (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "atan(D)D") (parameter 0))
}

function :math.atan2 (number, number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "atan2(DD)D") (parameter 0) (parameter 1))
}

function :math.tanh (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "tanh(D)D") (parameter 0))
}

function :math.log (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "log(D)D") (parameter 0))
}

function :math.log10 (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "log10(D)D") (parameter 0))
}

function :math.log1p (number -< number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "log1p(D)D") (parameter 0))
}

function :math.round (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "round(D)D") (parameter 0))
}

function :math.ceil (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "ceil(D)D") (parameter 0))
}

function :math.floor (number -> number) {
    return (invokeMethod (getMethod (javaClass "java.lang.Math") "floor(D)D") (parameter 0))
}